#option (STDC_HEADERS "Define to 1 if you have the ANSI C header files.")
#option (MAJOR_IN_MKDEV "Define to 1 if `major', `minor', and `makedev' are declared in <mkdev.h>.")
#option (MAJOR_IN_SYSMACROS "Define to 1 if `major', `minor', and `makedev' are declared in <sysmacros.h>.")
#option (STRERROR_R_CHAR_P "Define to 1 if strerror_r returns char *.")
#option (HAVE_DECL_PTHREAD_MUTEXATTR_SETPROTOCOL "Define to 1 if you have the declaration of `pthread_mutexattr_setprotocol', and to 0 if you don't.")
#option (HAVE_STRUCT_SOCKADDR_IN6 "Define to 1 if the system has the type `struct sockaddr_in6'.")
#option (HAVE_STRUCT_TIMEVAL "Define to 1 if the system has the type `struct timeval'.")
#option (HAVE_STRUCT_STAT_ST_ATIM "Define to 1 if `st_atim' is a member of `struct stat'.")
#option (HAVE_STRUCT_STAT_ST_ATIMESPEC "Define to 1 if `st_atimespec' is a member of `struct stat'.")
#option (HAVE_LIBICONV "Define to 1 if you have the `iconv' library (-liconv).")
#option (HAVE_USR_INCLUDE_MALLOC_H "Define to 1 if you have /usr/include/malloc.h.")

#option (PACKAGE_NAME "Define to the full name of this package.")
#option (PACKAGE_TARNAME "Define to the one symbol short name of this package.")
#option (PACKAGE_VERSION "Define to the version of this package.")
#option (PACKAGE_STRING "Define to the full name and version of this package.")
#option (PACKAGE_BUGREPORT "Define to the address where bug reports for this package should be sent.")
#option (PACKAGE_URL "Define to the home page for this package.")

#option (HOST_NO_SYMLINKS "This platform does not support symlinks")
#option (PTHREAD_POINTER_ID "pthread is a pointer")
#option (HOST_ANDROID "Targeting the Android platform")
#option (TARGET_ANDROID "...")
#option (USE_MACH_SEMA "...")
#option (HOST_FUCHSIA "Targeting the Fuchsia platform")
#option (HOST_AIX "Targeting the AIX and PASE platforms")
#option (NEED_LINK_UNLINK "Define if Unix sockets cannot be created in an anonymous namespace")
#option (HOST_WIN32 "Host Platform is Win32")
#option (TARGET_WIN32 "Target Platform is Win32")
#option (HOST_DARWIN "Host Platform is Darwin")
#option (HAVE_CLASSIC_WINAPI_SUPPORT "Use classic Windows API support")
#option (HAVE_UWP_WINAPI_SUPPORT "Don't use UWP Windows API support")
#option (HAVE_SYS_ZLIB "Use OS-provided zlib")
#option (ANDROID_UNIFIED_HEADERS "Whether Android NDK unified headers are used")
#option (SIZEOF_VOID_P "The size of `void *', as computed by sizeof.")
#option (SIZEOF_LONG "The size of `long', as computed by sizeof.")
#option (SIZEOF_INT "The size of `int', as computed by sizeof.")
#option (SIZEOF_LONG_LONG "The size of `long long', as computed by sizeof.")

#option (MONO_XEN_OPT "Xen-specific behaviour")
#option (MONO_SMALL_CONFIG "Reduce runtime requirements (and capabilities)")
#option (WORDS_BIGENDIAN "Define WORDS_BIGENDIAN to 1 if your processor stores words with the most significant byte first (like Motorola and SPARC, unlike Intel).")
#option (AC_APPLE_UNIVERSAL_BUILD "Define if building universal (internal helper macro)")
#option (MONO_JEMALLOC_ASSERT "Make jemalloc assert for mono")
#option (MONO_JEMALLOC_DEFAULT "Make jemalloc default for mono")
#option (MONO_JEMALLOC_ENABLED "Enable jemalloc usage for mono")
#option (MONO_PRIVATE_CRASHES "Do not include names of unmanaged functions in the crash dump")
#option (DISABLE_STRUCTURED_CRASH "Do not create structured crash files during unmanaged crashes")
#option (ENABLE_MONODROID "Enable runtime support for Monodroid (Xamarin.Android)")
#option (ENABLE_MONOTOUCH "Enable runtime support for Monotouch (Xamarin.iOS and Xamarin.Mac)")
#option (DISABLED_FEATURES "String of disabled features")
#option (ENABLE_ILGEN "Some VES is available at runtime")
#option (ENABLE_EXTENSION_MODULE "Extension module enabled")
#option (DEFAULT_GC_NAME "GC description")
#option (HAVE_NULL_GC "No GC support.")
#option (MONO_ZERO_LEN_ARRAY "Length of zero length arrays")
#option (HAVE_CLOCK_MONOTONIC "CLOCK_MONOTONIC")
#option (HAVE_CLOCK_MONOTONIC_COARSE "CLOCK_MONOTONIC_COARSE")
#option (HAVE_MACH_ABSOLUTE_TIME "mach_absolute_time")
#option (HAVE_GETHRTIME "gethrtime")
#option (HAVE_READ_REAL_TIME "read_real_time")
#option (MONO_DL_NEED_USCORE "Does dlsym require leading underscore.")
#option (GLIBC_BEFORE_2_3_4_SCHED_SETAFFINITY "Have GLIBC_BEFORE_2_3_4_SCHED_SETAFFINITY")
#option (GLIBC_HAS_CPU_COUNT "GLIBC has CPU_COUNT macro in sched.h")
#option (HAVE_LARGE_FILE_SUPPORT "Have large file support")
#option (HAVE_IP_PKTINFO "Have IP_PKTINFO")
#option (HAVE_IPV6_PKTINFO "Have IPV6_PKTINFO")
#option (HAVE_IP_DONTFRAGMENT "Have IP_DONTFRAGMENT")
#option (HAVE_IP_MTU_DISCOVER "Have IP_MTU_DISCOVER")
#option (HAVE_STRUCT_IP_MREQN "Have struct ip_mreqn")
#option (HAVE_STRUCT_IP_MREQ "Have struct ip_mreq")
#option (HAVE_GETADDRINFO "Have getaddrinfo")
#option (HAVE_GETHOSTBYNAME2 "Have gethostbyname2")
#option (HAVE_GETHOSTBYNAME "Have gethostbyname")
#option (HAVE_GETNAMEINFO "Have getnameinfo")
#option (HAVE_INET_NTOP "Have inet_ntop")
#option (HAVE_WORKING_SIGALTSTACK "Have a working sigaltstack")
#option (HAVE_EPOLL "epoll_create1")
#option (USE_KQUEUE_FOR_THREADPOOL "Use kqueue for the threadpool")
#option (HAVE_SIOCGIFCONF "Can get interface list")
#option (HAVE_SOCKADDR_IN_SIN_LEN "sockaddr_in has sin_len")
#option (HAVE_SOCKADDR_IN6_SIN_LEN "sockaddr_in6 has sin6_len")
#option (HAVE_GETIFADDRS "Have getifaddrs")
#option (HAVE_IF_NAMETOINDEX "Have if_nametoindex")
#option (HAVE_ACCESS "Have access")
#option (SIZEOF_SIZE_T "The size of `size_t', as computed by sizeof.")
#option (HAVE_QP2GETIFADDRS "Qp2getifaddrs")
#option (KEVENT_HAS_VOID_UDATA "kevent with void *data")
#option (BIND_ADDRLEN_UNSIGNED "bind with unsigned addrlen")
#option (IPV6MR_INTERFACE_UNSIGNED "struct ipv6_mreq with unsigned ipv6mr_interface")
#option (INOTIFY_RM_WATCH_WD_UNSIGNED "inotify_rm_watch with unsigned wd")
#option (PRIORITY_REQUIRES_INT_WHO "getpriority with int who")
#option (KEVENT_REQUIRES_INT_PARAMS "kevent with int parameters")
#option (ENABLE_GSS "ENABLE_GSS")
#option (HAVE_SOCKLEN_T "Have socklen_t")
#option (NAME_DEV_RANDOM "Name of /dev/random")
#option (MONO_BIG_ARRAYS "Enable the allocation and indexing of arrays greater than Int32.MaxValue")
#option (ENABLE_DTRACE "Enable DTrace probes")
#option (MONO_OFFSETS_FILE "AOT cross offsets file")
#option (ENABLE_LLVM "Enable the LLVM back end")
#option (ENABLE_LLVM_MSVC_ONLY "Enable the LLVM back end")
#option (INTERNAL_LLVM "LLVM used is being build during mono build")
#option (INTERNAL_LLVM_MSVC_ONLY "LLVM used is being build during mono build")
#option (INTERNAL_LLVM_ASSERTS "Build LLVM with assertions")
#option (INTERNAL_LLVM_ASSERTS_MSVC_ONLY "Build LLVM with assertions")
#option (MONO_LLVM_LOADED "The LLVM back end is dynamically loaded")
#option (ENABLE_LLVM_RUNTIME "Runtime support code for llvm enabled")
#option (ENABLE_LLVM_RUNTIME_MSVC_ONLY "Runtime support code for llvm enabled")
#option (MONO_ARCH_ILP32 "64 bit mode with 4 byte longs and pointers")
#option (MONO_CROSS_COMPILE "The runtime is compiled for cross-compiling mode")
#option (TARGET_WASM "...")
#option (TARGET_WATCHOS "The JIT/AOT targets WatchOS")
#option (TARGET_PS3 "...")
#option (__mono_ppc64__ "...")
#option (TARGET_XBOX360 "...")
#option (TARGET_PS4 "...")
#option (DISABLE_HW_TRAPS "...")
#option (TARGET_RISCV "Target is RISC-V")
#option (TARGET_RISCV32 "Target is 32-bit RISC-V")
#option (TARGET_RISCV64 "Target is 64-bit RISC-V")
#option (TARGET_X86 "...")
#option (TARGET_AMD64 "...")
#option (TARGET_ARM "...")
#option (TARGET_ARM64 "...")
#option (TARGET_POWERPC "...")
#option (TARGET_POWERPC64 "...")
#option (TARGET_S390X "...")
#option (TARGET_MIPS "...")
#option (TARGET_SPARC "...")
#option (TARGET_SPARC64 "...")
#option (HOST_WASM "...")
#option (HOST_X86 "...")
#option (HOST_AMD64 "...")
#option (HOST_ARM "...")
#option (HOST_ARM64 "...")
#option (HOST_POWERPC "...")
#option (HOST_POWERPC64 "...")
#option (HOST_S390X "...")
#option (HOST_MIPS "...")
#option (HOST_SPARC "...")
#option (HOST_SPARC64 "...")
#option (HOST_RISCV "Host is RISC-V")
#option (HOST_RISCV32 "Host is 32-bit RISC-V")
#option (HOST_RISCV64 "Host is 64-bit RISC-V")
#option (USE_GCC_ATOMIC_OPS "...")
#option (TARGET_IOS "The JIT/AOT targets iOS")
#option (TARGET_OSX "The JIT/AOT targets OSX")
#option (TARGET_MACH "The JIT/AOT targets Apple platforms")
#option (HAVE_VISIBILITY_HIDDEN "Support for the visibility (hidden) attribute")
#option (HAVE_MOVING_COLLECTOR "Moving collector")
#option (HAVE_CONC_GC_AS_DEFAULT "Defaults to concurrent GC")
#option (ENABLE_OVERRIDABLE_ALLOCATORS "Overridable allocator support enabled")
#option (ENABLE_ICALL_SYMBOL_MAP "Icall symbol map enabled")
#option (ENABLE_ICALL_EXPORT "Icall export enabled")
#option (DISABLE_ICALL_TABLES "Icall tables disabled")
#option (MONO_KEYWORD_THREAD "Have __thread keyword")
#option (HAVE_TLS_MODEL_ATTR "tls_model available")
#option (HAVE_ARMV5 "ARM v5")
#option (HAVE_ARMV6 "ARM v6")
#option (HAVE_ARMV7 "ARM v7")
#option (RISCV_FPABI_DOUBLE "RISC-V FPABI is double-precision")
#option (RISCV_FPABI_SINGLE "RISC-V FPABI is single-precision")
#option (RISCV_FPABI_SOFT "RISC-V FPABI is soft float")
#option (USE_MALLOC_FOR_MEMPOOLS "Use malloc for each single mempool allocation")
#option (LAZY_GC_THREAD_CREATION "Enable lazy gc thread creation by the embedding host.")
#option (ENABLE_COOP_SUSPEND "Enable cooperative stop-the-world garbage collection.")
#option (ENABLE_HYBRID_SUSPEND "Enable hybrid suspend for GC stop-the-world")
#option (ENABLE_EXPERIMENTS "Enable feature experiments")
#option (ENABLE_EXPERIMENT_null "Enable experiment 'null'")
#option (ENABLE_EXPERIMENT_TIERED "Enable experiment 'Tiered Compilation'")
#option (ENABLE_CHECKED_BUILD "Enable checked build")
#option (ENABLE_CHECKED_BUILD_GC "Enable GC checked build")
#option (ENABLE_CHECKED_BUILD_METADATA "Enable metadata checked build")
#option (ENABLE_CHECKED_BUILD_THREAD "Enable thread checked build")
#option (ENABLE_CHECKED_BUILD_PRIVATE_TYPES "Enable private types checked build")
#option (ENABLE_CHECKED_BUILD_CRASH_REPORTING "Enable private types checked build")
#option (HAVE_BTLS "BoringTls is supported")
#option (MONO_ARCHITECTURE "The architecture this is running on")
#option (MONO_INSIDE_RUNTIME "Disable banned functions from being used by the runtime")
